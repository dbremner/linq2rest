// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Linq2Rest.Provider;
using System.Linq.Expressions;
using System.Reactive.Concurrency;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using Linq2Rest.Reactive.Moles;
using Linq2Rest.Implementations;
using Microsoft.Pex.Framework.Explorable;
using System.Collections.Generic;

namespace Linq2Rest.Reactive
{
	public partial class RequeryingRestObservableTTests
	{
[Test]
[PexGeneratedBy(typeof(RequeryingRestObservableTTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException248()
{
    try
    {
      RequeryingRestObservable<int> requeryingRestObservable;
      requeryingRestObservable = this.Constructor<int>(default(TimeSpan), 
                                                       (IAsyncRestClientFactory)null, (ISerializerFactory)null, 
                                                       (Expression)null, (IScheduler)null, (IScheduler)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(RequeryingRestObservableTTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException254()
{
    try
    {
      SIAsyncRestClientFactory sIAsyncRestClientFactory;
      RequeryingRestObservable<int> requeryingRestObservable;
      sIAsyncRestClientFactory = new SIAsyncRestClientFactory();
      requeryingRestObservable = this.Constructor<int>
                                     (default(TimeSpan), (IAsyncRestClientFactory)sIAsyncRestClientFactory, 
                                                         (ISerializerFactory)null, 
                                      (Expression)null, (IScheduler)null, (IScheduler)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(RequeryingRestObservableTTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException51()
{
    try
    {
      SIAsyncRestClientFactory sIAsyncRestClientFactory;
      XmlSerializerFactory xmlSerializerFactory;
      RequeryingRestObservable<int> requeryingRestObservable;
      sIAsyncRestClientFactory = new SIAsyncRestClientFactory();
      Type[] types = new Type[0];
      xmlSerializerFactory = PexInvariant.CreateInstance<XmlSerializerFactory>();
      PexInvariant.SetField<IEnumerable<Type>>
          ((object)xmlSerializerFactory, "_knownTypes", (IEnumerable<Type>)types);
      PexInvariant.CheckInvariant((object)xmlSerializerFactory);
      requeryingRestObservable = this.Constructor<int>
                                     (default(TimeSpan), (IAsyncRestClientFactory)sIAsyncRestClientFactory, 
                                                         (ISerializerFactory)xmlSerializerFactory, 
                                      (Expression)null, (IScheduler)null, (IScheduler)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(RequeryingRestObservableTTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException72()
{
    try
    {
      SIAsyncRestClientFactory sIAsyncRestClientFactory;
      JsonDataContractSerializerFactory jsonDataContractSerializerFactory;
      RequeryingRestObservable<int> requeryingRestObservable;
      sIAsyncRestClientFactory = new SIAsyncRestClientFactory();
      Type[] types = new Type[0];
      jsonDataContractSerializerFactory =
        PexInvariant.CreateInstance<JsonDataContractSerializerFactory>();
      PexInvariant.SetField<IEnumerable<Type>>
          ((object)jsonDataContractSerializerFactory, 
           "_knownTypes", (IEnumerable<Type>)types);
      PexInvariant.CheckInvariant((object)jsonDataContractSerializerFactory);
      requeryingRestObservable = this.Constructor<int>
                                     (default(TimeSpan), (IAsyncRestClientFactory)sIAsyncRestClientFactory, 
                                                         (ISerializerFactory)jsonDataContractSerializerFactory, 
                                      (Expression)null, (IScheduler)null, (IScheduler)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(RequeryingRestObservableTTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ConstructorThrowsContractException688()
{
    try
    {
      SIAsyncRestClientFactory sIAsyncRestClientFactory;
      XmlDataContractSerializerFactory xmlDataContractSerializerFactory;
      RequeryingRestObservable<int> requeryingRestObservable;
      sIAsyncRestClientFactory = new SIAsyncRestClientFactory();
      Type[] types = new Type[0];
      xmlDataContractSerializerFactory =
        PexInvariant.CreateInstance<XmlDataContractSerializerFactory>();
      PexInvariant.SetField<IEnumerable<Type>>
          ((object)xmlDataContractSerializerFactory, 
           "_knownTypes", (IEnumerable<Type>)types);
      PexInvariant.CheckInvariant((object)xmlDataContractSerializerFactory);
      requeryingRestObservable = this.Constructor<int>
                                     (default(TimeSpan), (IAsyncRestClientFactory)sIAsyncRestClientFactory, 
                                                         (ISerializerFactory)xmlDataContractSerializerFactory, 
                                      (Expression)null, (IScheduler)null, (IScheduler)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
	}
}
