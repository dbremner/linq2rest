// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Linq2Rest.Provider.Moles;
using Microsoft.Pex.Framework.Explorable;
using System.Linq.Expressions;
using System.Collections.Generic;
using System.Collections;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework;

namespace Linq2Rest.Provider
{
	public partial class ExpressionProcessorTests
	{
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ProcessMethodCallThrowsContractException614()
{
    try
    {
      SIExpressionWriter sIExpressionWriter;
      ExpressionProcessor expressionProcessor;
      object o;
      sIExpressionWriter = new SIExpressionWriter();
      expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
      PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                               "_writer", (IExpressionWriter)sIExpressionWriter);
      PexInvariant.CheckInvariant((object)expressionProcessor);
      o = this.ProcessMethodCall<int>
              (expressionProcessor, (MethodCallExpression)null, 
               (ParameterBuilder)null, 
               (Func<ParameterBuilder, IEnumerable<int>>)null, 
               (Func<Type, ParameterBuilder, IEnumerable>)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ProcessMethodCallThrowsContractException186()
{
    try
    {
      SIExpressionWriter sIExpressionWriter;
      ExpressionProcessor expressionProcessor;
      Uri uri;
      ParameterBuilder parameterBuilder;
      object o;
      sIExpressionWriter = new SIExpressionWriter();
      expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
      PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                               "_writer", (IExpressionWriter)sIExpressionWriter);
      PexInvariant.CheckInvariant((object)expressionProcessor);
      uri = new Uri(" /\\0");
      string[] ss = new string[0];
      parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
      PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<FilterParameter>k__BackingField", (string)null);
      PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                           "<OrderByParameter>k__BackingField", (IList<string>)ss);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<SelectParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<ExpandParameter>k__BackingField", (string)null);
      PexInvariant.CheckInvariant((object)parameterBuilder);
      o = this.ProcessMethodCall<int>
              (expressionProcessor, (MethodCallExpression)null, 
               parameterBuilder, (Func<ParameterBuilder, IEnumerable<int>>)null, 
                                 (Func<Type, ParameterBuilder, IEnumerable>)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ProcessMethodCallThrowsContractException664()
{
    try
    {
      SIExpressionWriter sIExpressionWriter;
      ExpressionProcessor expressionProcessor;
      Uri uri;
      ParameterBuilder parameterBuilder;
      object o;
      sIExpressionWriter = new SIExpressionWriter();
      expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
      PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                               "_writer", (IExpressionWriter)sIExpressionWriter);
      PexInvariant.CheckInvariant((object)expressionProcessor);
      uri = new Uri(" a-:");
      string[] ss = new string[0];
      parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
      PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<FilterParameter>k__BackingField", (string)null);
      PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                           "<OrderByParameter>k__BackingField", (IList<string>)ss);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<SelectParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<ExpandParameter>k__BackingField", (string)null);
      PexInvariant.CheckInvariant((object)parameterBuilder);
      o = this.ProcessMethodCall<int>
              (expressionProcessor, (MethodCallExpression)null, 
               parameterBuilder, (Func<ParameterBuilder, IEnumerable<int>>)null, 
                                 (Func<Type, ParameterBuilder, IEnumerable>)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ProcessMethodCallThrowsContractException377()
{
    try
    {
      SIExpressionWriter sIExpressionWriter;
      ExpressionProcessor expressionProcessor;
      Uri uri;
      ParameterBuilder parameterBuilder;
      object o;
      sIExpressionWriter = new SIExpressionWriter();
      expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
      PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                               "_writer", (IExpressionWriter)sIExpressionWriter);
      PexInvariant.CheckInvariant((object)expressionProcessor);
      uri = new Uri(" aa:");
      string[] ss = new string[0];
      parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
      PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<FilterParameter>k__BackingField", (string)null);
      PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                           "<OrderByParameter>k__BackingField", (IList<string>)ss);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<SelectParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<ExpandParameter>k__BackingField", (string)null);
      PexInvariant.CheckInvariant((object)parameterBuilder);
      o = this.ProcessMethodCall<int>
              (expressionProcessor, (MethodCallExpression)null, parameterBuilder, 
                                                                PexChoose.CreateDelegate<Func<ParameterBuilder, IEnumerable<int>>>(), 
                                                                (Func<Type, ParameterBuilder, IEnumerable>)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ProcessMethodCallThrowsContractException89()
{
    try
    {
      SIExpressionWriter sIExpressionWriter;
      ExpressionProcessor expressionProcessor;
      Uri uri;
      ParameterBuilder parameterBuilder;
      object o;
      sIExpressionWriter = new SIExpressionWriter();
      expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
      PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                               "_writer", (IExpressionWriter)sIExpressionWriter);
      PexInvariant.CheckInvariant((object)expressionProcessor);
      uri = new Uri(" /\\-");
      string[] ss = new string[0];
      parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
      PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<FilterParameter>k__BackingField", (string)null);
      PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                           "<OrderByParameter>k__BackingField", (IList<string>)ss);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<SelectParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<ExpandParameter>k__BackingField", (string)null);
      PexInvariant.CheckInvariant((object)parameterBuilder);
      o = this.ProcessMethodCall<int>
              (expressionProcessor, (MethodCallExpression)null, 
               parameterBuilder, (Func<ParameterBuilder, IEnumerable<int>>)null, 
                                 (Func<Type, ParameterBuilder, IEnumerable>)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void ProcessMethodCallThrowsContractException374()
{
    try
    {
      SIExpressionWriter sIExpressionWriter;
      ExpressionProcessor expressionProcessor;
      Uri uri;
      ParameterBuilder parameterBuilder;
      object o;
      sIExpressionWriter = new SIExpressionWriter();
      expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
      PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                               "_writer", (IExpressionWriter)sIExpressionWriter);
      PexInvariant.CheckInvariant((object)expressionProcessor);
      uri = new Uri(" /\\\u8020");
      string[] ss = new string[0];
      parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
      PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<FilterParameter>k__BackingField", (string)null);
      PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                           "<OrderByParameter>k__BackingField", (IList<string>)ss);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<SelectParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>
          ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
      PexInvariant.SetField<string>((object)parameterBuilder, 
                                    "<ExpandParameter>k__BackingField", (string)null);
      PexInvariant.CheckInvariant((object)parameterBuilder);
      o = this.ProcessMethodCall<int>
              (expressionProcessor, (MethodCallExpression)null, 
               parameterBuilder, (Func<ParameterBuilder, IEnumerable<int>>)null, 
                                 (Func<Type, ParameterBuilder, IEnumerable>)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
public void ProcessMethodCall79()
{
    SIExpressionWriter sIExpressionWriter;
    ExpressionProcessor expressionProcessor;
    Uri uri;
    ParameterBuilder parameterBuilder;
    object o;
    sIExpressionWriter = new SIExpressionWriter();
    expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
    PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                             "_writer", (IExpressionWriter)sIExpressionWriter);
    PexInvariant.CheckInvariant((object)expressionProcessor);
    uri = new Uri(" /\\0");
    string[] ss = new string[0];
    parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
    PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<FilterParameter>k__BackingField", (string)null);
    PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                         "<OrderByParameter>k__BackingField", (IList<string>)ss);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<SelectParameter>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<ExpandParameter>k__BackingField", (string)null);
    PexInvariant.CheckInvariant((object)parameterBuilder);
    o = this.ProcessMethodCall<int>
            (expressionProcessor, (MethodCallExpression)null, parameterBuilder, 
                                                              PexChoose.CreateDelegate<Func<ParameterBuilder, IEnumerable<int>>>(), 
                                                              PexChoose.CreateDelegate<Func<Type, ParameterBuilder, IEnumerable>>());
    PexAssert.IsNull(o);
    PexAssert.IsNotNull((object)expressionProcessor);
}
[Test]
[PexGeneratedBy(typeof(ExpressionProcessorTests))]
[Ignore("the test state was: duplicate path")]
public void ProcessMethodCallThrowsTermDestructionException359()
{
    SIExpressionWriter sIExpressionWriter;
    ExpressionProcessor expressionProcessor;
    Uri uri;
    ParameterBuilder parameterBuilder;
    object o;
    sIExpressionWriter = new SIExpressionWriter();
    expressionProcessor = PexInvariant.CreateInstance<ExpressionProcessor>();
    PexInvariant.SetField<IExpressionWriter>((object)expressionProcessor, 
                                             "_writer", (IExpressionWriter)sIExpressionWriter);
    PexInvariant.CheckInvariant((object)expressionProcessor);
    uri = new Uri(" /\\8");
    string[] ss = new string[0];
    parameterBuilder = PexInvariant.CreateInstance<ParameterBuilder>();
    PexInvariant.SetField<Uri>((object)parameterBuilder, "_serviceBase", uri);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<FilterParameter>k__BackingField", (string)null);
    PexInvariant.SetField<IList<string>>((object)parameterBuilder, 
                                         "<OrderByParameter>k__BackingField", (IList<string>)ss);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<SelectParameter>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<SkipParameter>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<TakeParameter>k__BackingField", (string)null);
    PexInvariant.SetField<string>
        ((object)parameterBuilder, "<ExpandParameter>k__BackingField", (string)null);
    PexInvariant.CheckInvariant((object)parameterBuilder);
    o = this.ProcessMethodCall<int>
            (expressionProcessor, (MethodCallExpression)null, parameterBuilder, 
                                                              PexChoose.CreateDelegate<Func<ParameterBuilder, IEnumerable<int>>>(), 
                                                              PexChoose.CreateDelegate<Func<Type, ParameterBuilder, IEnumerable>>());
}
	}
}
