// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using Microsoft.Pex.Framework.Generated;
using NUnit.Framework;
using Microsoft.Pex.Framework.Moles;
using Linq2Rest.Provider.Moles;
using Microsoft.Pex.Framework;
using Microsoft.Pex.Framework.Exceptions;

namespace Linq2Rest.Provider
{
	public partial class RestQueryProviderTTests
	{
[Test]
[PexGeneratedBy(typeof(RestQueryProviderTTests))]
[ExpectedException(typeof(ArgumentNullException))]
public void Constructor01ThrowsArgumentNullException211()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      RestQueryProvider<int> restQueryProvider;
      restQueryProvider = this.Constructor01<int>
                              ((IRestClient)null, (ISerializerFactory)null, (IExpressionProcessor)null);
      disposables.Add((IDisposable)restQueryProvider);
      disposables.Dispose();
    }
}
[Test]
[PexGeneratedBy(typeof(RestQueryProviderTTests))]
[ExpectedException(typeof(ArgumentNullException))]
public void Constructor01ThrowsArgumentNullException28()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      using (PexDisposableContext disposables = PexDisposableContext.Create())
      {
        SIRestClient sIRestClient;
        RestQueryProvider<int> restQueryProvider;
        sIRestClient = new SIRestClient();
        disposables.Add((IDisposable)sIRestClient);
        restQueryProvider = this.Constructor01<int>((IRestClient)sIRestClient, 
                                                    (ISerializerFactory)null, (IExpressionProcessor)null);
        disposables.Add((IDisposable)restQueryProvider);
        disposables.Dispose();
      }
    }
}
[Test]
[PexGeneratedBy(typeof(RestQueryProviderTTests))]
[ExpectedException(typeof(ArgumentNullException))]
public void Constructor01ThrowsArgumentNullException697()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      using (PexDisposableContext disposables = PexDisposableContext.Create())
      {
        SIRestClient sIRestClient;
        SISerializerFactory sISerializerFactory;
        RestQueryProvider<int> restQueryProvider;
        sIRestClient = new SIRestClient();
        disposables.Add((IDisposable)sIRestClient);
        sISerializerFactory = new SISerializerFactory();
        restQueryProvider = this.Constructor01<int>((IRestClient)sIRestClient, 
                                                    (ISerializerFactory)sISerializerFactory, (IExpressionProcessor)null);
        disposables.Add((IDisposable)restQueryProvider);
        disposables.Dispose();
      }
    }
}
[Test]
[PexGeneratedBy(typeof(RestQueryProviderTTests))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException478()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      RestQueryProvider<int> restQueryProvider;
      restQueryProvider =
        this.Constructor<int>((IRestClient)null, (ISerializerFactory)null);
      disposables.Add((IDisposable)restQueryProvider);
      disposables.Dispose();
    }
}
[Test]
[PexGeneratedBy(typeof(RestQueryProviderTTests))]
[ExpectedException(typeof(ArgumentNullException))]
public void ConstructorThrowsArgumentNullException274()
{
    using (PexChooseBehavedBehavior.Setup())
    {
      using (PexDisposableContext disposables = PexDisposableContext.Create())
      {
        SIRestClient sIRestClient;
        RestQueryProvider<int> restQueryProvider;
        sIRestClient = new SIRestClient();
        disposables.Add((IDisposable)sIRestClient);
        restQueryProvider =
          this.Constructor<int>((IRestClient)sIRestClient, (ISerializerFactory)null);
        disposables.Add((IDisposable)restQueryProvider);
        disposables.Dispose();
      }
    }
}
	}
}
