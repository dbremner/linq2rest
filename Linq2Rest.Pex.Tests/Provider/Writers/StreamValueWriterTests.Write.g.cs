// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using System.IO;
using Microsoft.Pex.Framework;

namespace Linq2Rest.Provider.Writers
{
	using System.IO;

	public partial class StreamValueWriterTests
	{
[Test]
[PexGeneratedBy(typeof(StreamValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException143()
{
    try
    {
      string s;
      StreamValueWriter s0 = new StreamValueWriter();
      s = this.Write(s0, (object)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(StreamValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException90()
{
    try
    {
      string s;
      StreamValueWriter s0 = new StreamValueWriter();
      object s1 = new object();
      s = this.Write(s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(StreamValueWriterTests))]
public void Write258()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      string s;
      byte[] bs = new byte[0];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      StreamValueWriter s0 = new StreamValueWriter();
      s = this.Write(s0, (object)memoryStream);
      disposables.Dispose();
      PexAssert.AreEqual<string>("X\'\'", s);
      PexAssert.IsNotNull((object)s0);
    }
}
[Test]
[PexGeneratedBy(typeof(StreamValueWriterTests))]
public void Write828()
{
    using (PexDisposableContext disposables = PexDisposableContext.Create())
    {
      MemoryStream memoryStream;
      string s;
      byte[] bs = new byte[9];
      memoryStream = new MemoryStream(bs, false);
      disposables.Add((IDisposable)memoryStream);
      StreamValueWriter s0 = new StreamValueWriter();
      s = this.Write(s0, (object)memoryStream);
      disposables.Dispose();
      PexAssert.AreEqual<string>("X\'AAAAAAAAAAAA\'", s);
      PexAssert.IsNotNull((object)s0);
    }
}
	}
}
