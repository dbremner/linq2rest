// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;
using Microsoft.Pex.Engine.Exceptions;
using Microsoft.Pex.Framework;

namespace Linq2Rest.Provider.Writers
{
	public partial class IntegerValueWriterTests
	{
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException747()
{
    try
    {
      string s;
      UnsignedLongValueWriter s0 = new UnsignedLongValueWriter();
      s = this.Write((IntegerValueWriter)s0, (object)null);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException608()
{
    try
    {
      string s;
      UnsignedLongValueWriter s0 = new UnsignedLongValueWriter();
      object s1 = new object();
      s = this.Write((IntegerValueWriter)s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException512()
{
    try
    {
      string s;
      UnsignedShortValueWriter s0 = new UnsignedShortValueWriter();
      object s1 = new object();
      s = this.Write((IntegerValueWriter)s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException882()
{
    try
    {
      string s;
      LongValueWriter s0 = new LongValueWriter();
      object s1 = new object();
      s = this.Write((IntegerValueWriter)s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException933()
{
    try
    {
      string s;
      ShortValueWriter s0 = new ShortValueWriter();
      object s1 = new object();
      s = this.Write((IntegerValueWriter)s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException667()
{
    try
    {
      string s;
      IntValueWriter s0 = new IntValueWriter();
      object s1 = new object();
      s = this.Write((IntegerValueWriter)s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
[PexRaisedContractException(PexExceptionState.Expected)]
public void WriteThrowsContractException448()
{
    try
    {
      string s;
      UnsignedIntValueWriter s0 = new UnsignedIntValueWriter();
      object s1 = new object();
      s = this.Write((IntegerValueWriter)s0, s1);
      throw 
        new AssertionException("expected an exception of type ContractException");
    }
    catch(Exception ex)
    {
      if (!PexContract.IsContractException(ex))
        throw ex;
    }
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
public void Write254()
{
    string s;
    UnsignedLongValueWriter s0 = new UnsignedLongValueWriter();
    object boxl = (object)(default(ulong));
    s = this.Write((IntegerValueWriter)s0, boxl);
    PexAssert.AreEqual<string>("0", s);
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
public void Write55()
{
    string s;
    UnsignedLongValueWriter s0 = new UnsignedLongValueWriter();
    object boxl = (object)(default(ulong));
    PexSafeHelpers.AssignBoxedValue<ulong>(boxl, 1uL);
    s = this.Write((IntegerValueWriter)s0, boxl);
    PexAssert.AreEqual<string>("1", s);
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
public void Write15()
{
    string s;
    UnsignedShortValueWriter s0 = new UnsignedShortValueWriter();
    object boxw = (object)(default(ushort));
    s = this.Write((IntegerValueWriter)s0, boxw);
    PexAssert.AreEqual<string>("0", s);
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
public void Write769()
{
    string s;
    ShortValueWriter s0 = new ShortValueWriter();
    object boxw = (object)(default(short));
    s = this.Write((IntegerValueWriter)s0, boxw);
    PexAssert.AreEqual<string>("0", s);
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
public void Write546()
{
    string s;
    UnsignedIntValueWriter s0 = new UnsignedIntValueWriter();
    object boxu = (object)(default(uint));
    s = this.Write((IntegerValueWriter)s0, boxu);
    PexAssert.AreEqual<string>("0", s);
}
[Test]
[PexGeneratedBy(typeof(IntegerValueWriterTests))]
public void Write428()
{
    string s;
    LongValueWriter s0 = new LongValueWriter();
    object boxl = (object)(default(long));
    s = this.Write((IntegerValueWriter)s0, boxl);
    PexAssert.AreEqual<string>("0", s);
}
	}
}
