// <auto-generated>
// This file contains automatically generated unit tests.
// Do NOT modify this file manually.
// 
// When Pex is invoked again,
// it might remove or update any previously generated unit tests.
// 
// If the contents of this file becomes outdated, e.g. if it does not
// compile anymore, you may delete this file and invoke Pex again.
// </auto-generated>
using System;
using System.Linq.Expressions;
using Microsoft.Pex.Framework;
using NUnit.Framework;
using Microsoft.Pex.Framework.Generated;

namespace Linq2Rest.Parser
{
	public partial class FilterExpressionFactoryTests
	{
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create01494()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create01<int>(s0, (string)null, (IFormatProvider)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create01863()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create01<int>(s0, "(", (IFormatProvider)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create01639()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create01<int>(s0, "\u0100", (IFormatProvider)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create01654()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create01<int>(s0, "eq", (IFormatProvider)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create01738()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create01<int>(s0, "\u0100\0\0\0", (IFormatProvider)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create01990()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create01<int>(s0, "\0\0\0\0", (IFormatProvider)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create788()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, (string)null);
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create805()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, "(");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create929()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, "\u0100");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create235()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, "eq");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create58()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, "\0\0\0\0");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create770()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, "()");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create722()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, " \0");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create17()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, " /");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
[Test]
[PexGeneratedBy(typeof(FilterExpressionFactoryTests))]
public void Create449()
{
    Expression<Func<int, bool>> expression;
    FilterExpressionFactory s0 = new FilterExpressionFactory();
    expression = this.Create<int>(s0, "and");
    PexAssert.IsNotNull((object)expression);
    PexAssert.IsNotNull(((LambdaExpression)expression).Type);
    PexAssert.AreEqual<ExpressionType>
        (ExpressionType.Lambda, ((LambdaExpression)expression).NodeType);
    PexAssert.IsNotNull(((LambdaExpression)expression).Parameters);
    PexAssert.AreEqual<string>((string)null, ((LambdaExpression)expression).Name);
    PexAssert.IsNotNull(((LambdaExpression)expression).Body);
    PexAssert.AreEqual<bool>(false, ((LambdaExpression)expression).TailCall);
    PexAssert.IsNotNull((object)s0);
}
	}
}
